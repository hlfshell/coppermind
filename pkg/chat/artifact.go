package chat

import "fmt"

/*
Artifact is a generic object that is passed into
or created by the AI agent on mesages. Examples
of possible artifacts:
1 - An image generated by request to the AI
2 - A document we are asking the AI questions about
3 - An e-mail the AI generated to send
4 - Voice input or output for the conversation
*/
type Artifact struct {
	ID   string  `json:"id,omitempty" db:"id"`
	Type string  `json:"type,omitempty" db:"type"`
	Data Payload `json:"data,omitempty" db:"data"`
}

type Payload interface {
	Equal(other Payload) bool
	String() string
	JSON() ([]byte, error)
	FromJSON() (Payload, error)
	FromRawPayload(raw *RawPayload) (Payload, error)
	ToRawPayload() (*RawPayload, error)
}

/*
When loading from the store, we don't know what the
payload is expected to be as we're loading it as a
"generic" type, which can be converted later to
another type.
*/
type RawPayload struct {
	bytes []byte
}

func (payload *RawPayload) Equal(other Payload) bool {
	rawPayload, err := other.ToRawPayload()
	if err != nil {
		return false
	}

	return string(payload.bytes) == string(rawPayload.bytes)
}

func (payload *RawPayload) String() string {
	return fmt.Sprintf("Payload of length %d", len(payload.bytes))
}

func (payload *RawPayload) JSON() ([]byte, error) {
	return payload.bytes, nil
}

func (payload *RawPayload) FromJSON() (Payload, error) {
	return payload, nil
}

func (payload *RawPayload) FromRawPayload(raw *RawPayload) (Payload, error) {
	return raw, nil
}

func (payload *RawPayload) ToRawPayload() (*RawPayload, error) {
	return payload, nil
}
